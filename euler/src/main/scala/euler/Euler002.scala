/*
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 *                      1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, find the sum of the even-valued terms.
 */

package euler

object Euler002 {

  /** Solution of second Euler problem.
    * @param n
    *   Value that limit the sum of Fibonacci numbers.
    * @return
    *   The sum of even Fibonacci numbers below n.
    */
  def solution(n: Int): Int = {
    fib(0, 1).takeWhile(_ <= n).filter(_ % 2 == 0).sum
  }

  // Helper function for second Euler problem.
  def fib(a: Int, b: Int): LazyList[Int] = a #:: fib(b, a + b)
}
